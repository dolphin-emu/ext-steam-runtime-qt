/* Generated by wayland-scanner 1.18.0 */

#ifndef QT_KEY_UNSTABLE_V1_CLIENT_PROTOCOL_H
#define QT_KEY_UNSTABLE_V1_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client-core.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_qt_key_unstable_v1 The qt_key_unstable_v1 protocol
 * @section page_ifaces_qt_key_unstable_v1 Interfaces
 * - @subpage page_iface_zqt_key_v1 - send serialized QKeyEvents
 * @section page_copyright_qt_key_unstable_v1 Copyright
 * <pre>
 *
 * Copyright (C) 2018 The Qt Company Ltd.
 * SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause
 * </pre>
 */
struct wl_surface;
struct zqt_key_v1;

/**
 * @page page_iface_zqt_key_v1 zqt_key_v1
 * @section page_iface_zqt_key_v1_desc Description
 *
 * This protocol is independent of the Wayland seat concept. Its
 * intention is to let a QKeyEvent be transferred from a Qt compositor
 * to a Qt client without losing or adding false information by going
 * through wl_seat and wl_keyboard.
 *
 * Note: This protocol is considered private to Qt. We will do our
 * best to bump version numbers when we make backwards compatible
 * changes, bump the protocol name and interface suffixes when we make
 * backwards incompatible changes, but we provide no guarantees. We
 * may also remove the protocol without warning. Implement this at
 * your own risk.
 * @section page_iface_zqt_key_v1_api API
 * See @ref iface_zqt_key_v1.
 */
/**
 * @defgroup iface_zqt_key_v1 The zqt_key_v1 interface
 *
 * This protocol is independent of the Wayland seat concept. Its
 * intention is to let a QKeyEvent be transferred from a Qt compositor
 * to a Qt client without losing or adding false information by going
 * through wl_seat and wl_keyboard.
 *
 * Note: This protocol is considered private to Qt. We will do our
 * best to bump version numbers when we make backwards compatible
 * changes, bump the protocol name and interface suffixes when we make
 * backwards incompatible changes, but we provide no guarantees. We
 * may also remove the protocol without warning. Implement this at
 * your own risk.
 */
extern const struct wl_interface zqt_key_v1_interface;

/**
 * @ingroup iface_zqt_key_v1
 * @struct zqt_key_v1_listener
 */
struct zqt_key_v1_listener {
	/**
	 * send key event
	 *
	 * The key event notifies the client that a QKeyEvent has
	 * occurred on the server side.
	 */
	void (*key)(void *data,
		    struct zqt_key_v1 *zqt_key_v1,
		    struct wl_surface *surface,
		    uint32_t time,
		    uint32_t type,
		    uint32_t key,
		    uint32_t modifiers,
		    uint32_t nativeScanCode,
		    uint32_t nativeVirtualKey,
		    uint32_t nativeModifiers,
		    const char *text,
		    uint32_t autorepeat,
		    uint32_t count);
};

/**
 * @ingroup iface_zqt_key_v1
 */
static inline int
zqt_key_v1_add_listener(struct zqt_key_v1 *zqt_key_v1,
			const struct zqt_key_v1_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) zqt_key_v1,
				     (void (**)(void)) listener, data);
}

/**
 * @ingroup iface_zqt_key_v1
 */
#define ZQT_KEY_V1_KEY_SINCE_VERSION 1


/** @ingroup iface_zqt_key_v1 */
static inline void
zqt_key_v1_set_user_data(struct zqt_key_v1 *zqt_key_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) zqt_key_v1, user_data);
}

/** @ingroup iface_zqt_key_v1 */
static inline void *
zqt_key_v1_get_user_data(struct zqt_key_v1 *zqt_key_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) zqt_key_v1);
}

static inline uint32_t
zqt_key_v1_get_version(struct zqt_key_v1 *zqt_key_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) zqt_key_v1);
}

/** @ingroup iface_zqt_key_v1 */
static inline void
zqt_key_v1_destroy(struct zqt_key_v1 *zqt_key_v1)
{
	wl_proxy_destroy((struct wl_proxy *) zqt_key_v1);
}

#ifdef  __cplusplus
}
#endif

#endif
