/* Generated by wayland-scanner 1.18.0 */

#ifndef QT_WINDOWMANAGER_CLIENT_PROTOCOL_H
#define QT_WINDOWMANAGER_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client-core.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_qt_windowmanager The qt_windowmanager protocol
 * @section page_ifaces_qt_windowmanager Interfaces
 * - @subpage page_iface_qt_windowmanager - 
 * @section page_copyright_qt_windowmanager Copyright
 * <pre>
 *
 * Copyright (C) 2015 The Qt Company Ltd.
 * SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause
 * </pre>
 */
struct qt_windowmanager;

/**
 * @page page_iface_qt_windowmanager qt_windowmanager
 * @section page_iface_qt_windowmanager_api API
 * See @ref iface_qt_windowmanager.
 */
/**
 * @defgroup iface_qt_windowmanager The qt_windowmanager interface
 */
extern const struct wl_interface qt_windowmanager_interface;

/**
 * @ingroup iface_qt_windowmanager
 * @struct qt_windowmanager_listener
 */
struct qt_windowmanager_listener {
	/**
	 */
	void (*hints)(void *data,
		      struct qt_windowmanager *qt_windowmanager,
		      int32_t show_is_fullscreen);
	/**
	 */
	void (*quit)(void *data,
		     struct qt_windowmanager *qt_windowmanager);
};

/**
 * @ingroup iface_qt_windowmanager
 */
static inline int
qt_windowmanager_add_listener(struct qt_windowmanager *qt_windowmanager,
			      const struct qt_windowmanager_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) qt_windowmanager,
				     (void (**)(void)) listener, data);
}

#define QT_WINDOWMANAGER_OPEN_URL 0

/**
 * @ingroup iface_qt_windowmanager
 */
#define QT_WINDOWMANAGER_HINTS_SINCE_VERSION 1
/**
 * @ingroup iface_qt_windowmanager
 */
#define QT_WINDOWMANAGER_QUIT_SINCE_VERSION 1

/**
 * @ingroup iface_qt_windowmanager
 */
#define QT_WINDOWMANAGER_OPEN_URL_SINCE_VERSION 1

/** @ingroup iface_qt_windowmanager */
static inline void
qt_windowmanager_set_user_data(struct qt_windowmanager *qt_windowmanager, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) qt_windowmanager, user_data);
}

/** @ingroup iface_qt_windowmanager */
static inline void *
qt_windowmanager_get_user_data(struct qt_windowmanager *qt_windowmanager)
{
	return wl_proxy_get_user_data((struct wl_proxy *) qt_windowmanager);
}

static inline uint32_t
qt_windowmanager_get_version(struct qt_windowmanager *qt_windowmanager)
{
	return wl_proxy_get_version((struct wl_proxy *) qt_windowmanager);
}

/** @ingroup iface_qt_windowmanager */
static inline void
qt_windowmanager_destroy(struct qt_windowmanager *qt_windowmanager)
{
	wl_proxy_destroy((struct wl_proxy *) qt_windowmanager);
}

/**
 * @ingroup iface_qt_windowmanager
 *
 * If remaining is not 0 this is a multipart request, and
 * the server must concatenate subsequent requst urls to and
 * including a request where remaining is set to 0, before
 * it can handle the url.
 */
static inline void
qt_windowmanager_open_url(struct qt_windowmanager *qt_windowmanager, uint32_t remaining, const char *url)
{
	wl_proxy_marshal((struct wl_proxy *) qt_windowmanager,
			 QT_WINDOWMANAGER_OPEN_URL, remaining, url);
}

#ifdef  __cplusplus
}
#endif

#endif
